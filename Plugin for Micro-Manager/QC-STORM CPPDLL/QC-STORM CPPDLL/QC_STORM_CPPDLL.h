/*
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class hust_whno_SMLM_QC_STORM_Plug */

#ifndef _Included_hust_whno_SMLM_QC_STORM_Plug
#define _Included_hust_whno_SMLM_QC_STORM_Plug
#ifdef __cplusplus
extern "C" {
#endif


/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetProcessorID
* Signature: ([C)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetProcessorID
(JNIEnv *, jclass, jint);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_GetProcessorID
* Signature: ([C)V
*/
JNIEXPORT jint JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1GetProcessorID
(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetSavePath
* Signature: ([C)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetSavePath
	(JNIEnv *, jclass, jcharArray);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetLocPara
* Signature: (FFFIIIFFF)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetLocPara
	(JNIEnv *, jclass, jfloat, jfloat, jfloat, jint, jint, jint, jint, jfloat, jfloat, jfloat, jfloat);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetLocPara3D
* Signature: (FFFFFFFFI)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetLocPara3D
	(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetImagePara
* Signature: (IIII)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetImagePara
	(JNIEnv *, jclass, jint, jint, jint, jint);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetAcquisitionPara
* Signature: (I[C)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetAcquisitionPara
	(JNIEnv *, jclass, jcharArray);
/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetStatInfSelection
* Signature: (I)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetStatInfSelection
(JNIEnv *, jclass, jint, jint, jint);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_FeedImageData
* Signature: ([SI)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1FeedImageData
	(JNIEnv *, jclass, jshortArray, jint);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_StartLocThread
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1StartLocThread
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_StopLocThread
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1StopLocThread
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_ReleaseLocResource
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1ReleaseLocResource
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_IsLocFinish
* Signature: ()I
*/
JNIEXPORT jint JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1IsLocFinish
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_GetMaxDispVal
* Signature: ()I
*/
JNIEXPORT jint JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1GetMaxDispVal
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_GetWaitImageNum
* Signature: ()I
*/
JNIEXPORT jint JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1GetWaitImageNum
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_GetSMLMImage
* Signature: ()[F
*/
JNIEXPORT jfloatArray JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1GetSMLMImage
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_GetSMLMImage3D
* Signature: ()[I
*/
JNIEXPORT jintArray JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1GetSMLMImage3D
	(JNIEnv *, jclass);


/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetSpatialResolutionInf
* Signature: (IF)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetSpatialResolutionInf
	(JNIEnv *, jclass, jint, jint, jfloat, jfloat);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_GetCurSpatialResolution
* Signature: ()F
*/
JNIEXPORT jfloat JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1GetCurSpatialResolution
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_GetMeanLocPrec
* Signature: ()F
*/
JNIEXPORT jfloat JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1GetMeanLocPrec
	(JNIEnv *, jclass);



/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetFeedbackDevice
* Signature: (IIII)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetFeedbackDevice
	(JNIEnv *, jclass, jint, jint, jint, jint);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetFeedbackEnable
* Signature: (II)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetFeedbackEnable
	(JNIEnv *, jclass, jint, jint);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetFeedbackManualTarget
* Signature: (IFI)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetFeedbackManualTarget
	(JNIEnv *, jclass, jint, jfloat, jint);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetFeedbackPIDParameters
* Signature: (IFFF)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetFeedbackPIDParameters
	(JNIEnv *, jclass, jint, jfloat, jfloat, jfloat);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_ResetFeedback
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1ResetFeedback
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_GetFirstUARTId
* Signature: ()I
*/
JNIEXPORT jint JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1GetFirstUARTId
	(JNIEnv *, jclass);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_ZDepthSMMove
* Signature: (I)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1ZDepthSMMove
	(JNIEnv *, jclass, jint);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_FeedbackCtlTest
* Signature: (II)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1FeedbackCtlTest
(JNIEnv *, jclass, jint, jint);


/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetTranslationStage
* Signature: (III)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetTranslationStage
	(JNIEnv *, jclass, jint, jint, jint);


/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_TranslationStageMove
* Signature: (III)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1TranslationStageMove
	(JNIEnv *, jclass, jint, jint, jint);

/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_SetMultiFOVAcqParameters
* Signature: (III)V
*/
JNIEXPORT void JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1SetMultiFOVAcqParameters
(JNIEnv *env, jclass obj, jfloat iFOVOverlapPercent);


/*
* Class:     hust_whno_SMLM_QC_STORM_Plug
* Method:    lm_LocBatchedImg
* Signature: ([SI)[F
*/
JNIEXPORT jfloatArray JNICALL Java_hust_whno_SMLM_QC_1STORM_1Plug_lm_1LocBatchedImg
(JNIEnv *, jclass, jshortArray, jint);



#ifdef __cplusplus
}
#endif
#endif
